// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CaseManagementAPI.Migrations
{
    [DbContext(typeof(CMSContext))]
    [Migration("20230523142104_bloodTest_HBAIC_TG_Creatinine_Nullable")]
    partial class bloodTest_HBAIC_TG_Creatinine_Nullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CaseManagementAPI.Models.BloodPressureTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<double>("Diastolic")
                        .HasColumnType("double");

                    b.Property<double>("Systolic")
                        .HasColumnType("double");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.ToTable("BloodPressureTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.BloodTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("BloodSugarAfterMeal")
                        .HasColumnType("double");

                    b.Property<double>("BloodSugarBeforeMeal")
                        .HasColumnType("double");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<double?>("Creatinine")
                        .HasColumnType("double");

                    b.Property<double?>("HBAIC")
                        .HasColumnType("double");

                    b.Property<double?>("TG")
                        .HasColumnType("double");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.ToTable("BloodTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.CmsCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AllergyMd")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Contactor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyMedicalHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MangerId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SeekDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Waistline")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("MangerId");

                    b.HasIndex("PatientId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.CmsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CmsUser");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.EyeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNormal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.ToTable("EyeTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.FootTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLeftNormal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRightNormal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.ToTable("FootTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.HealthHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TraceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TraceItemJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.HasIndex("ManagerId");

                    b.ToTable("HealthHistory");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.PatientSelfHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BloodPressureTestId")
                        .HasColumnType("int");

                    b.Property<int>("BloodTestId")
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<int>("FootCare")
                        .HasColumnType("int");

                    b.Property<int>("FootTestId")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<string>("MedicineRecord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MouseCare")
                        .HasColumnType("int");

                    b.Property<int>("SportCare")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BloodPressureTestId");

                    b.HasIndex("BloodTestId");

                    b.HasIndex("CmsCaseId");

                    b.HasIndex("FootTestId");

                    b.ToTable("PatientSelfHistory");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.UrineTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CmsCaseId")
                        .HasColumnType("int");

                    b.Property<bool>("DidRoutine")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LDL")
                        .HasColumnType("double");

                    b.Property<double>("Microprotein")
                        .HasColumnType("double");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CmsCaseId");

                    b.ToTable("UrineTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.BloodPressureTest", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("BloodPressureTests")
                        .HasForeignKey("CmsCaseId");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.BloodTest", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("BloodTests")
                        .HasForeignKey("CmsCaseId");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.CmsCase", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsUser", "Manger")
                        .WithMany()
                        .HasForeignKey("MangerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseManagementAPI.Models.CmsUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manger");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.EyeTest", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("EyeTests")
                        .HasForeignKey("CmsCaseId");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.FootTest", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("FootTests")
                        .HasForeignKey("CmsCaseId");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.HealthHistory", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("HealthHistories")
                        .HasForeignKey("CmsCaseId");

                    b.HasOne("CaseManagementAPI.Models.CmsUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.PatientSelfHistory", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.BloodPressureTest", "BloodPressureTest")
                        .WithMany()
                        .HasForeignKey("BloodPressureTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseManagementAPI.Models.BloodTest", "BloodTest")
                        .WithMany()
                        .HasForeignKey("BloodTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("PatientSelfHistories")
                        .HasForeignKey("CmsCaseId");

                    b.HasOne("CaseManagementAPI.Models.FootTest", "FootTest")
                        .WithMany()
                        .HasForeignKey("FootTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodPressureTest");

                    b.Navigation("BloodTest");

                    b.Navigation("FootTest");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.UrineTest", b =>
                {
                    b.HasOne("CaseManagementAPI.Models.CmsCase", null)
                        .WithMany("UrineTests")
                        .HasForeignKey("CmsCaseId");
                });

            modelBuilder.Entity("CaseManagementAPI.Models.CmsCase", b =>
                {
                    b.Navigation("BloodPressureTests");

                    b.Navigation("BloodTests");

                    b.Navigation("EyeTests");

                    b.Navigation("FootTests");

                    b.Navigation("HealthHistories");

                    b.Navigation("PatientSelfHistories");

                    b.Navigation("UrineTests");
                });
#pragma warning restore 612, 618
        }
    }
}
